#########################################################################
# COMMON PROTOLIB MAKEFILE STUFF
#

SHELL=/bin/sh

.SUFFIXES: .cpp $(.SUFFIXES)

PROTOLIB = ../protolib
COMMON = ../src/common
UNIX = ../makefiles
INCLUDE = ../include
NS = ../ns
INSTALLPREFIX ?= /usr/local

INCLUDES = $(SYSTEM_INCLUDES) -I$(UNIX) -I$(INCLUDE) -I$(PROTOLIB)/include

CFLAGS = -std=c++11 -g -DMNE_SUPPORT -DPROTO_DEBUG -DUNIX -D_FILE_OFFSET_BITS=64 -O -fPIC $(SYSTEM_CFLAGS) $(SYSTEM_HAVES) $(INCLUDES)

LDFLAGS = $(SYSTEM_LDFLAGS)

LIBS = $(SYSTEM_LIBS) -lm -lpthread

TARGETS = nrlsmf

# Rule for C++ .cpp extension
.cpp.o:
	$(CC) -c $(CFLAGS) -o $*.o $*.cpp

all:	nrlsmf

# SMF depends upon the NRL Protean Group's development library
LIBPROTO = $(PROTOLIB)/lib/libprotokit.a
$(PROTOLIB)/lib/libprotokit.a:
	cd $(PROTOLIB)/makefiles; $(MAKE) -f Makefile.$(SYSTEM) libprotokit.a

NRLSMF_SRC = $(COMMON)/nrlsmf.cpp $(COMMON)/smf.cpp $(COMMON)/smfDpd.cpp \
	$(COMMON)/smfHash.cpp $(COMMON)/smfHashMD5.cpp $(COMMON)/smfHashSHA1.cpp \
	$(COMMON)/smfQueue.cpp $(COMMON)/smfConfig.cpp $(SYSTEM_SRC)

NRLSMF_OBJ = $(NRLSMF_SRC:.cpp=.o)

nrlsmf:    $(NRLSMF_OBJ) $(LIBPROTO)
	$(CC) $(CFLAGS) -o $@ $(NRLSMF_OBJ) $(LDFLAGS) $(LIBS) $(LIBPROTO)

# Builds "nrlsmf" with embedded experimental Elastic Multicast code
ELASTIC_SRC = $(NRLSMF_SRC) $(COMMON)/mcastFib.cpp \
	$(COMMON)/elasticMsg.cpp

ELASTIC_OBJ = $(ELASTIC_SRC:.cpp=.o)

elastic: CFLAGS += -DELASTIC_MCAST
elastic:	$(ELASTIC_OBJ) $(LIBPROTO)
	$(CC) $(CFLAGS) -o nrlsmf $(ELASTIC_OBJ) $(LDFLAGS) $(LIBS) $(LIBPROTO)

# Builds "nrlsmf" with embedded Smart Robust Routing (SRR) Code (for R2DN Program)
ADAPTIVE_SRC = $(NRLSMF_SRC) $(COMMON)/mcastFib.cpp \
	$(COMMON)/elasticMsg.cpp $(COMMON)/path.cpp $(COMMON)/r2dnMsg.cpp $(COMMON)/smartController.cpp $(COMMON)/smartForwarder.cpp

ADAPTIVE_OBJ = $(ADAPTIVE_SRC:.cpp=.o)

adaptive: CFLAGS += -DADAPTIVE_ROUTING
adaptive:	$(ADAPTIVE_OBJ) $(LIBPROTO)
	$(CC) $(CFLAGS) -o nrlsmf $(ADAPTIVE_OBJ) $(LDFLAGS) $(LIBS) $(LIBPROTO)

# Builds "fibTest" for testing MulticastFIB class
FIB_SRC = $(COMMON)/fibTest.cpp $(COMMON)/mcastFib.cpp \
	$(COMMON)/elasticMsg.cpp $(COMMON)/r2dnMsg.cpp

FIB_OBJ = $(FIB_SRC:.cpp=.o)

fibTest: CFLAGS += -DELASTIC_MCAST
fibTest:	$(FIB_OBJ) $(LIBPROTO)
	$(CC) $(CFLAGS) -o fibTest $(FIB_OBJ) $(LDFLAGS) $(LIBS) $(LIBPROTO)
    
    
# Builds "pcap2em" for Elastic Multicast pcap analysis
PCAPEM_SRC = $(COMMON)/pcap2em.cpp $(COMMON)/elasticMsg.cpp

PCAPEM_OBJ = $(PCAPEM_SRC:.cpp=.o)

pcap2em: CFLAGS += -DELASTIC_MCAST
pcap2em:	$(PCAPEM_OBJ) $(LIBPROTO)
	$(CC) $(CFLAGS) -o pcap2em $(PCAPEM_OBJ) $(LDFLAGS) $(LIBS) $(LIBPROTO) -lpcap



PSEND_SRC = $(COMMON)/psend.cpp $(SYSTEM_SRC) \
	$(PROTOLIB)/src/common/protoPkt.cpp $(PROTOLIB)/src/common/protoPktIP.cpp

PSEND_OBJ = $(PSEND_SRC:.cpp=.o)

psend:    $(PSEND_OBJ) $(LIBPROTO)
	$(CC) $(CFLAGS) -o $@ $(PSEND_OBJ) $(LDFLAGS) $(LIBS) $(LIBPROTO)

NT_SRC = $(COMMON)/nt.cpp $(PROTOLIB)/src/manet/manetMsg.cpp
NT_OBJ = $(NT_SRC:.cpp=.o)
nt:    $(NT_OBJ) $(LIBPROTO)
	$(CC) $(CFLAGS) -o $@ $(NT_OBJ) $(LDFLAGS) $(LIBS) $(LIBPROTO)


NHDP_SRC = $(COMMON)/nhdpTest.cpp $(COMMON)/nhdp.cpp \
	 $(PROTOLIB)/src/manet/manetMsg.cpp $(PROTOLIB)/src/manet/manetGraph.cpp \
	 $(PROTOLIB)/src/common/protoGraph.cpp
NHDP_OBJ = $(NHDP_SRC:.cpp=.o)
nhdp:    $(NHDP_OBJ) $(LIBPROTO)
	$(CC) $(CFLAGS) -o $@ $(NHDP_OBJ) $(LDFLAGS) $(LIBS) $(LIBPROTO)

GT_SRC = $(COMMON)/gt.cpp $(PROTOLIB)/src/common/protoGraph.cpp \
	$(PROTOLIB)/src/manet/manetGraph.cpp
GT_OBJ = $(GT_SRC:.cpp=.o)
gt:    $(GT_OBJ) $(LIBPROTO)
	$(CC) $(CFLAGS) -o $@ $(GT_OBJ) $(LDFLAGS) $(LIBS) $(LIBPROTO)

TAP_SRC = $(COMMON)/tapExample.cpp
TAP_OBJ = $(TAP_SRC:.cpp=.o)
tapExample:    $(TAP_OBJ) $(LIBPROTO)
	$(CC) $(CFLAGS) -o $@ $(TAP_OBJ) $(LDFLAGS) $(LIBS) $(LIBPROTO)


install:
	mkdir -p $(INSTALLPREFIX)/bin
	cp -p nrlsmf $(INSTALLPREFIX)/bin

clean:
	rm -f *.o $(COMMON)/*.o $(NS)/*.o ../wx/*.o *.a nrlsmf; \
        cd $(PROTOLIB)/makefiles; $(MAKE) -f Makefile.$(SYSTEM) clean

smfclean:
	rm -f *.o $(COMMON)/*.o $(NS)/*.o ../wx/*.o *.a nrlsmf;

# DO NOT DELETE THIS LINE -- mkdep uses it.
# DO NOT PUT ANYTHING AFTER THIS LINE, IT WILL GO AWAY.



